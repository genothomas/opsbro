build: false

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

#    - PYTHON: "C:\\Python27"
#      PYTHON_VERSION: "2.7.x"
#      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"

#    - PYTHON: "C:\\Python33"
#      PYTHON_VERSION: "3.3.x"
#      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Python33-x64"
#      PYTHON_VERSION: "3.3.x"
#      PYTHON_ARCH: "64"

#    - PYTHON: "C:\\Python34"
#      PYTHON_VERSION: "3.4.x"
#      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Python34-x64"
#      PYTHON_VERSION: "3.4.x"
#      PYTHON_ARCH: "64"

    # Python versions not pre-installed

    # Python 2.6.6 is the latest Python 2.6 with a Windows installer
    # See: https://github.com/ogrisel/python-appveyor-demo/issues/10

#    - PYTHON: "C:\\Python266"
#      PYTHON_VERSION: "2.6.6"
#      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Python266-x64"
#      PYTHON_VERSION: "2.6.6"
#      PYTHON_ARCH: "64"

#    - PYTHON: "C:\\Python35"
#      PYTHON_VERSION: "3.5.0"
#      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Python35-x64"
#      PYTHON_VERSION: "3.5.0"
#      PYTHON_ARCH: "64"

#    - PYTHON: "C:\\Python36"
#      PYTHON_VERSION: "3.6.0"
#      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Python36-x64"
#      PYTHON_VERSION: "3.6.0"
#      PYTHON_ARCH: "64"

#    - PYTHON: "C:\\Python37"
#      PYTHON_VERSION: "3.7.0"
#      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Python37-x64"
#      PYTHON_VERSION: "3.7.0"
#      PYTHON_ARCH: "64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --upgrade pip"

  #- "python -m pip install --only-binary pypiwin32 pypiwin32"
  - "python setup.py install"
  # TODO: remove this, and let the setup.py do the job
  - xcopy . c:\opsbro /O /X /E /H /K /Y


build_script:
  #- "%CMD_IN_ENV% python setup.py build"
  - python --version

test_script:
  # Run the project tests
  - "%CMD_IN_ENV% python bin/opsbro"
  - sh: tests/test_python_tests.sh
  - echo "CLASSIC RUN"
  - "%CMD_IN_ENV% python bin/opsbro agent windows service-install"
  - net start OpsBro
  - "%CMD_IN_ENV% python bin/opsbro agent info"
  - "%CMD_IN_ENV% python bin/opsbro collectors state"
  - "%CMD_IN_ENV% python bin/opsbro monitoring state"



after_test:
  # If tests are successful, create binary packages for the project.
#  - "%CMD_IN_ENV% python setup.py bdist_wheel"
#  - "%CMD_IN_ENV% python setup.py bdist_wininst"
#  - "%CMD_IN_ENV% python setup.py bdist_msi"
  - ps: "ls"

#artifacts:
#  # Archive the generated packages in the ci.appveyor.com build report.
#  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
